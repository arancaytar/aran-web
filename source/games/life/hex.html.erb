---
title: Game of Life
scripts:
  - isotropic.js
  - square.js
  - hex.js
  - util.js
styles: ['life.css']
forms: true
---
<form id="form-controls">
  <label>Size: <input type="range" id="size" min="5" max="120" step="1" value="10" /></label>
  <label>Speed: <input type="range" id="speed" min="-10" max="10" step="1" value="0" /></label>
  <fieldset>
    <button id="reset" type="button" title="Reset"><i class="fas fa-random"></i></button>
    <button id="start" type="button" title="Start"><i class="fas fa-play"></i></button>
    <button id="stop" type="button" title="Pause"><i class="fas fa-pause"></i></button>
    <button id="step" type="button" title="Step"><i class="fas fa-step-forward"></i></button>
  </fieldset>
  <div class="box">
    <canvas id="board"></canvas>
  </div>
</form>
<script>
    var simulator;
    const canv = document.getElementById('board');
    const ctx = canv.getContext('2d');
    const controls = {};
    for (let elem of document.getElementById('form-controls')) {
        controls[elem.id] = elem;
    }

    //const permUrl = document.getElementById('perm');

    const url = new URL(document.location);

    const color = {
      fill: (x => ['white', 'black'][x]),
      stroke: 'black'
    };

    for (let control in controls) {
        const value = url.searchParams.get(control);
        if (value) {
            controls[control].value = value;
        }
    }

    let game;
    const functions = {
        start: () => {
            if (!simulator) simulator = functions.init();
            const speed = 2**(controls.speed.value);
            const delay = speed < 1 ? 2/speed : 100;
            const skip = speed > 1 ? speed : 1;
            controls.start.disabled = true;
            controls.stop.disabled = false;
            controls.step.disabled = true;
            simulator.start(skip, delay);
        },

        step: () => {
          if (!simulator) simulator = functions.init();
          if (!simulator.running) {
            simulator.step();
          }
        },

        restart: () => {
          permUrl.href = `?${encodeQueryData(controls)}`
          functions.stop() && functions.start();
        },

        stop: () => {
          simulator && simulator.stop();
          controls.start.disabled = false;
          controls.step.disabled = false;
          controls.stop.disabled = true;
        },

        reset: () => {
          //permUrl.href = `?${encodeQueryData(controls)}`;
          if (game) game.stop();
          ctx.clearRect(0, 0, canv.width, canv.height);
          const cellsize = controls.size.value > 20 ? (controls.size.value > 50 ? 3 : 5) : 10;
          simulator = functions.init();
          canv.width = controls.size.value * cellsize * 3.5;
          canv.height = controls.size.value * cellsize * 3.5;
          simulator.game.board.draw(ctx, cellsize, [canv.width/2, canv.height/2], color);
        },

        init: () => {
          const board = () => new HexGrid(+controls.size.value);
          const game = new Life(board);
          for (let cell of game.board.getCells()) {
            game.board.set(...cell, Math.floor(Math.random()*2));
          }
          const cellsize = controls.size.value > 20 ? (controls.size.value > 50 ? 3 : 5) : 10;
          return new Simulator(game, () => {
            simulator.game.board.draw(ctx, cellsize, [canv.width/2, canv.height/2], color);
          }).onStop(() => {
            console.log("stopped");
            controls.start.disabled = false;
            controls.stop.disabled = true;
            controls.step.disabled = false;
          })
        }
    };

    controls.start.onclick = functions.start;
    controls.stop.onclick = functions.stop;
    controls.reset.onclick = functions.reset;
    controls.step.onclick = functions.step;
    controls.size.onchange = functions.reset;
    controls.speed.onchange = functions.restart;

    functions.reset();
    functions.start();

    function encodeQueryData(data) {
       let ret = [];
       for (let d in data)
         if (data[d].value)
          ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d].value));
       return ret.join('&');
    }

</script>
